[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "syslog-mcp"
version = "0.1.0"
description = "A Model Context Protocol (MCP) server for querying and analyzing syslog data stored in Elasticsearch"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Jacob Magar", email = "jmagar@gmail.com"}
]
keywords = ["mcp", "syslog", "elasticsearch", "logging", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Logging",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "fastmcp>=2.11.1",
    "elasticsearch>=8.0.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0",
    "asyncio-throttle>=1.0.0",
    "structlog>=23.0.0",
    "python-dotenv>=1.0.0",
    "mypy>=1.17.1",
    "types-python-dateutil>=2.9.0.20250809",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "testcontainers>=3.7.0",
    "faker>=20.0.0",
    "factory-boy>=3.3.0",
    "hypothesis>=6.82.0",
    "pytest-benchmark>=4.0.0",
    "mutmut>=2.4.0",
]

[project.scripts]
syslog-mcp = "syslog_mcp.server:main"
syslog-mcp-http = "syslog_mcp.http_server:main"

[project.urls]
Homepage = "https://github.com/yourusername/syslog-mcp"
Documentation = "https://github.com/yourusername/syslog-mcp#readme"
Repository = "https://github.com/yourusername/syslog-mcp"
Issues = "https://github.com/yourusername/syslog-mcp/issues"

# ==========================================
# Tool Configuration
# ==========================================

[tool.hatch.build.targets.wheel]
packages = ["src/syslog_mcp"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
cache-dir = ".cache/ruff"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "PTH", # flake8-use-pathlib
    "S",  # flake8-bandit (security)
    "ASYNC", # flake8-async
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Use of assert detected

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
cache_dir = ".cache/mypy"
fast_module_lookup = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
cache_dir = ".cache/pytest"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=syslog_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: marks tests as unit tests (fast, minimal dependencies)",
    "integration: marks tests as integration tests (requires Elasticsearch)",
    "slow: marks tests as slow-running tests",
    "elasticsearch: marks tests that require Elasticsearch connection",
    "performance: marks tests that measure performance",
    "error_handling: marks tests that test error scenarios",
    "security: marks tests that test security features",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]
data_file = ".cache/coverage/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = ".cache/coverage/htmlcov"

[tool.coverage.xml]
output = ".cache/coverage/coverage.xml"

[tool.ruff.format]
cache-dir = ".cache/ruff"

[tool.pre-commit]
default_stages = ["commit", "push"]

[dependency-groups]
dev = [
    "factory-boy>=3.3.3",
    "faker>=37.5.3",
    "hypothesis>=6.138.3",
    "mutmut>=3.3.1",
    "pytest-asyncio>=1.1.0",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "testcontainers>=4.12.0",
]
